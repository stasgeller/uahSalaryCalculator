// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/start.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	domain "uahSalaryBot/infrastructure/domain"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockTgBot is a mock of TgBot interface.
type MockTgBot struct {
	ctrl     *gomock.Controller
	recorder *MockTgBotMockRecorder
}

// MockTgBotMockRecorder is the mock recorder for MockTgBot.
type MockTgBotMockRecorder struct {
	mock *MockTgBot
}

// NewMockTgBot creates a new mock instance.
func NewMockTgBot(ctrl *gomock.Controller) *MockTgBot {
	mock := &MockTgBot{ctrl: ctrl}
	mock.recorder = &MockTgBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTgBot) EXPECT() *MockTgBotMockRecorder {
	return m.recorder
}

// Listen mocks base method.
func (m *MockTgBot) Listen(arg0 context.Context, arg1 chan *domain.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Listen", arg0, arg1)
}

// Listen indicates an expected call of Listen.
func (mr *MockTgBotMockRecorder) Listen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockTgBot)(nil).Listen), arg0, arg1)
}

// Send mocks base method.
func (m *MockTgBot) Send(arg0 context.Context, arg1 tgbotapi.MessageConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTgBotMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTgBot)(nil).Send), arg0, arg1)
}

// ShutDown mocks base method.
func (m *MockTgBot) ShutDown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShutDown")
}

// ShutDown indicates an expected call of ShutDown.
func (mr *MockTgBotMockRecorder) ShutDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutDown", reflect.TypeOf((*MockTgBot)(nil).ShutDown))
}

// MockUserBase is a mock of UserBase interface.
type MockUserBase struct {
	ctrl     *gomock.Controller
	recorder *MockUserBaseMockRecorder
}

// MockUserBaseMockRecorder is the mock recorder for MockUserBase.
type MockUserBaseMockRecorder struct {
	mock *MockUserBase
}

// NewMockUserBase creates a new mock instance.
func NewMockUserBase(ctrl *gomock.Controller) *MockUserBase {
	mock := &MockUserBase{ctrl: ctrl}
	mock.recorder = &MockUserBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserBase) EXPECT() *MockUserBaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserBase) Create(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserBaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserBase)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockUserBase) Delete(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserBaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserBase)(nil).Delete), arg0)
}

// FindOrCreate mocks base method.
func (m *MockUserBase) FindOrCreate(arg0 context.Context, arg1 *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOrCreate indicates an expected call of FindOrCreate.
func (mr *MockUserBaseMockRecorder) FindOrCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreate", reflect.TypeOf((*MockUserBase)(nil).FindOrCreate), arg0, arg1)
}

// ReadOne mocks base method.
func (m *MockUserBase) ReadOne(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOne", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadOne indicates an expected call of ReadOne.
func (mr *MockUserBaseMockRecorder) ReadOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOne", reflect.TypeOf((*MockUserBase)(nil).ReadOne), arg0)
}

// Update mocks base method.
func (m *MockUserBase) Update(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserBaseMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserBase)(nil).Update), arg0)
}

// MockFindUser is a mock of FindUser interface.
type MockFindUser struct {
	ctrl     *gomock.Controller
	recorder *MockFindUserMockRecorder
}

// MockFindUserMockRecorder is the mock recorder for MockFindUser.
type MockFindUserMockRecorder struct {
	mock *MockFindUser
}

// NewMockFindUser creates a new mock instance.
func NewMockFindUser(ctrl *gomock.Controller) *MockFindUser {
	mock := &MockFindUser{ctrl: ctrl}
	mock.recorder = &MockFindUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFindUser) EXPECT() *MockFindUserMockRecorder {
	return m.recorder
}

// FindOrCreate mocks base method.
func (m *MockFindUser) FindOrCreate(arg0 context.Context, arg1 *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOrCreate indicates an expected call of FindOrCreate.
func (mr *MockFindUserMockRecorder) FindOrCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreate", reflect.TypeOf((*MockFindUser)(nil).FindOrCreate), arg0, arg1)
}
