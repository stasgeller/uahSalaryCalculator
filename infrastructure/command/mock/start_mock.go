// Code generated by MockGen. DO NOT EDIT.
// Source: ./infrastructure/command/start.go

// Package mock_command is a generated GoMock package.
package mock_command

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandlerActions is a mock of HandlerActions interface.
type MockHandlerActions struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerActionsMockRecorder
}

// MockHandlerActionsMockRecorder is the mock recorder for MockHandlerActions.
type MockHandlerActionsMockRecorder struct {
	mock *MockHandlerActions
}

// NewMockHandlerActions creates a new mock instance.
func NewMockHandlerActions(ctrl *gomock.Controller) *MockHandlerActions {
	mock := &MockHandlerActions{ctrl: ctrl}
	mock.recorder = &MockHandlerActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerActions) EXPECT() *MockHandlerActionsMockRecorder {
	return m.recorder
}

// Use mocks base method.
func (m *MockHandlerActions) Use(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockHandlerActionsMockRecorder) Use(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockHandlerActions)(nil).Use), arg0, arg1)
}
